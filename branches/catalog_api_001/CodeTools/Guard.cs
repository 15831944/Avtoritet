using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Threading.Tasks;

namespace CodeTools
{
 public static class Guard
 {
  /// <summary>
  /// Returns the data parameter, ensuring that it's not null.
  /// Should be used to check method parameter value.
  /// Throws <exception cref="ContractViolationException">ContractViolationException</exception>.
  /// </summary>
  /// <typeparam name="T"></typeparam>
  /// <param name="argument"></param>
  /// <param name="name">Parameter name</param>
  /// <returns></returns>
  public static T GetNotNull<T>(T argument, string name) where T : class
  {
   CheckNotNull(argument, name);

   return argument;
  }

  /// <summary>
  /// Returns the data parameter, ensuring that it's not null.
  /// Should be used to check method parameter value.
  /// Throws <exception cref="ContractViolationException">ContractViolationException</exception>.
  /// </summary>
  /// <typeparam name="T"></typeparam>
  /// <param name="argument"></param>
  /// <param name="name">Parameter name</param>
  /// <returns></returns>
  public static T GetNotNull<T>(T? argument, string name) where T : struct
  {
   CheckNotNull(argument, name);

   // ReSharper disable PossibleInvalidOperationException
   return argument.Value;
   // ReSharper restore PossibleInvalidOperationException
  }

  /// <summary>
  /// Ensures that method parameter is not null 
  /// or throws <exception cref="ArgumentNullException">ArgumentNullException</exception> if it is.
  /// </summary>
  /// <typeparam name="T"></typeparam>
  /// <param name="argument"></param>
  /// <param name="name">Method parameter name</param>
  public static void CheckNotNull<T>(T argument, string name) where T : class
  {
   if (argument == null)
   {
    throw CreateArgumentNullException(name);
   }
  }

  /// <summary>
  /// Ensures that method parameter is not null 
  /// or throws <exception cref="ArgumentNullException">ArgumentNullException</exception> if it is.
  /// </summary>
  /// <typeparam name="T"></typeparam>
  /// <param name="argument"></param>
  /// <param name="name">Method parameter name</param>
  public static void CheckNotNull<T>(T? argument, string name) where T : struct
  {
   if (argument == null)
   {
    throw CreateArgumentNullException(name);
   }
  }

  /// <summary>
  /// Ensures that method parameter is not less or equals to zero.
  /// Throws <exception cref="ArgumentOutOfRangeException">ArgumentOutOfRangeException</exception> if it is.
  /// </summary>
  public static void IsPositive(int argumentValue, string argumentName)
  {
   if (argumentValue > 0)
   {
    return;
   }

   throw new ArgumentOutOfRangeException(argumentName, argumentValue, "Argument should contains only positive values.");
  }

  /// <summary>
  /// Ensures that method parameter is not less or equals to zero.
  /// Throws <exception cref="ArgumentOutOfRangeException">ArgumentOutOfRangeException</exception> if it is.
  /// </summary>
  public static int GetPositive(int argumentValue, string argumentName)
  {
   IsPositive(argumentValue, argumentName);
   return argumentValue;
  }

  /// <summary>
  /// Checks if object is not disposed 
  /// or throws <exception cref="ObjectDisposedException">ObjectDisposedException</exception> if it is.
  /// </summary>
  /// <typeparam name="T"></typeparam>
  /// <param name="isDisposed"></param>
  /// <param name="obj"></param>
  public static void CheckNotDisposed<T>(bool isDisposed, T obj) where T : IDisposable
  {
   if (isDisposed)
   {
    throw new ObjectDisposedException(obj.GetType().FullName);
   }
  }

  /// <summary>
  /// Checks string contains text 
  /// or throws <exception cref="ContractViolationException">ContractViolationException</exception> if it is.
  /// </summary>
  /// <param name="argument"></param>
  /// <param name="name"></param>
  public static void CheckContainsText(string argument, string name)
  {
   if (argument == null)
   {
    throw CreateArgumentNullException(name);
   }

   if (string.IsNullOrWhiteSpace(argument))
   {
    throw new Exception("CheckContainsText Exception");
//    throw new ContractViolationException(string.Format("Argument '{0}' cannot be empty or contain whitespaces only : '{1}'.", name, argument));
   }
  }

  /// <summary>
  /// Checks string contains text or throws user defined exception generated by <paramref name="exceptionCreator"/>.
  /// </summary>
  /// <param name="argument"></param>
  /// /// <param name="exceptionCreator"></param>
  public static void CheckContainsText<TException>(string argument, Func<TException> exceptionCreator) where TException : Exception
  {
   if (string.IsNullOrEmpty(argument) || string.IsNullOrWhiteSpace(argument))
   {
//    throw CreateUserDefinedException(exceptionCreator);
   }
  }

  public static void CheckNotEmptyGuids(IEnumerable<Guid> items, string containerName, string itemName)
  {
   CheckContainsText(containerName, "name");
   CheckContainsText(itemName, "itemName");
   CheckNotNull(items, containerName);

   foreach (var item in items)
   {
    CheckGuidNotEmpty(item, itemName);
   }
  }

  public static void CheckGuidNotEmpty(Guid check, string name)
  {
   if (check != Guid.Empty)
   {
    return;
   }

   throw new ArgumentException(string.Format("{0} can`t be empty.", name));
  }

  public static void CheckNullableGuidNotEmpty(Guid? check, string name)
  {
   if (!check.HasValue)
   {
    return;
   }

   CheckGuidNotEmpty(check.Value, name);
  }

  private static ArgumentNullException CreateArgumentNullException(string name)
  {
   return new ArgumentNullException(name, string.Format("Argument '{0}' cannot be null.", name));
  }
 }
}